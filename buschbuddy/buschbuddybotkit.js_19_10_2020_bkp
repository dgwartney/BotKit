require('console-stamp')(console, {
    pattern: 'dd/mm/yyyy HH:MM:ss.l'
});

var bot = require("./config.json").bot;
var botId = bot.id;
var botName = bot.name;
var sdk = require("./lib/sdk");
var Promise = require("bluebird");
var request = require('request-promise');
var api = require('./SalesforceLiveChatAPI.js');
var _ = require('lodash');
var config = require('./config.json');
var debug = require('debug')("Agent");
var messageConf = require('./message.json');
var redisOperations = require('./lib/redisOperations');
var VisitorTimeOutEvent = require("./VisitorTimeOutEvent.js");
var utils = require("./utils");
var sfdcConfig = require(config.sfdc_config_file);
var apiURL= sfdcConfig.case.api_URL;
var brands =sfdcConfig.brands;

async function getPendingMessages(visitorId, session_key, affinity_token, count) {
    count = count || 1;
    //console.log("|getPendingMessages | BotKit.js | Count :" + count, "|" + visitorId);
    //debug("getPendingMessages | BotKit.js | Count :" + count, "|" + visitorId, session_key, affinity_token);
    var endChat = false;
    var agentClosed = false;
    redisOperations.getRedisData("data:" + visitorId).then(function (data) {
        //console.log("data from redis"+data);
        if(data)
        {
        return api.getPendingMessages(session_key, affinity_token)
            .then(function (res) {
                    visitor_id = visitorId;
                    _.each(res.messages, function (event, key) {
                        if (event.type === "ChatEstablished" ) {
                            //console.log("|getPendingMessages | BotKit.js | ChatEstablished | ", visitorId);
                            var timeout = event.message.chasitorIdleTimeout.timeout
                            data.context.session_key = session_key;
                            data.context.affinity_token = affinity_token;
                            VisitorTimeOutEvent.add(data, timeout);
                        }else if(event.type === "ChatRequestSuccess"){
                                //console.log("|getPendingMessages | BotKit.js | ChatEstablished | ", visitorId);
                                var timeout = event.message.connectionTimeout
                                data.context.session_key = session_key;
                                data.context.affinity_token = affinity_token;
                                VisitorTimeOutEvent.add(data, timeout);

                        } else if (event.type === "ChatMessage" ) {
                            debug('replying ', event);
                            //console.log("|getPendingMessages | BotKit.js | ChatMessage (FromAgent) | ", visitorId);
                            data.message = event.message.text;
                            var initials = event.message.name.match(/\b\w/g) || [];
                            initials = ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();

                            data.overrideMessagePayload = null;
                            var interval = key >= 1 ? 1000 * (key) : 0;
                            setTimeout(function (tempdata) {
                                return sdk.sendUserMessage(tempdata, function (err) {
                                    if (err) {
                                        console.log("An error occured"+JSON.stringify(err))
                                        return api.endChat(session_key, affinity_token).then(function (re) {
                                            return closeChat(tempdata);
                                        });
                                    }
                                }).catch(function (e) {
                                    console.error("getPendingMessages | BotKit.js | ChatMessage (FromAgent) | ", e);
                                });
                            }, interval, _.clone(data));
                        } else if (event.type === "ChatEnded") {
                            //console.log("-------chatended2----------")

                            endChat = true;
                            VisitorTimeOutEvent.delete(data);
                            redisOperations.deleteRedisData("entry:" + visitorId);
                            redisOperations.deleteRedisData("data:" + visitorId);
                            redisOperations.deleteRedisData("connected:" + visitorId)

                            sdk.clearAgentSession(data);
                            //console.log("|getPendingMessages | BotKit.js | ChatEnded | ", visitorId);
                            data.message = messageConf.chatEndedMsg;

                            data.overrideMessagePayload = null;

                            sdk.sendUserMessage(data, function () {
                                data.message = messageConf.anythingElseAgentSuccessDialog;
                                //console.log("| getPendingMessages | BotKit.js | Invoking AnythingElseDialog |", visitorId);
                                return sdk.sendBotMessage(data);
                            });
                        } else if (event.type === "ChatRequestFail" && event.message.reason !="NoPost") {
                        //    console.log("event messaage reason-->"+event.message.reason)
                        //console.log("-------chatended1----------")

                        //console.log("|getPendingMessages | BotKit.js | ChatRequestFail | ", visitorId);
                            redisOperations.deleteRedisData("entry:" + visitorId)
                            redisOperations.deleteRedisData("data:" + visitorId)
                            redisOperations.deleteRedisData("connected:" + visitorId)
                            endChat = true;
                            sdk.clearAgentSession(data);
                            data.message = messageConf.chatRequestFailMsg;
                            data.overrideMessagePayload = null;
                            sdk.sendUserMessage(data, function () {
                                data.message = messageConf.anythingElseAgentFailedDialog;
                                //console.log("| getPendingMessages | BotKit.js | AnythingElseDialog scenario agentfailed |", visitorId);
                                return sdk.sendBotMessage(data);
                            });
                        }
                    });
                    if (endChat){
                        //console.log("-------chatended----------")
                        //console.log("|getPendingMessages | BotKit.js | PollingStop | ", "Count : ", count, " | ", visitorId);
                    }
                    if (agentClosed){
                        //console.log("Agent closed---------")
                        clearAgentNotification(data, visitorId);
                    }
                    if (!endChat)

                    getPendingMessages(visitorId, session_key, affinity_token, count + 1);
            })
            .catch(function (e) {
                console.error("|getPendingMessages | BotKit.js | ERROR From getMessages Api | Error Code | ", e.statusCode);
                if (e.statusCode === 403)
                    console.info("|getPendingMessages | BotKit.js | Removing Expired Session from Redis |", visitorId);
                clearAgentNotification(data, visitorId);
            });
        }
        else
        {
            //console.log("|getPendingMessages | BotKit.js | Data not found | ",visitorId);
            //console.log("|getPendingMessages | BotKit.js | PollingStop  | ",visitorId);
        }
    }).catch(function (error) {
        console.error("|getPendingMessages | BotKit.js | ERROR While Retriving Redis Data | ", error);
    });
}
function sleep(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    });
  }   
function gethistory(limit, offset, data) {
    return new Promise(function (resolve, reject) {
        if (data) {
            data.limit = limit;
            data.offset = offset;
            data.channelType = _.get(data, 'context.session.BotUserSession.lastMessage.channel', "");
            sdk.getMessages(data, function (err, resp) {
                if (err) {
                    return reject(err);
                }
                return resolve(resp.messages);
            });
        } else {
            var error = {
                msg: "gethistory failed for user",
                code: 401
            };
            return reject(error);
        }
    });
}

function getSessionHistory(data, offset) {
    /*To do - Make History availble for facebook*/
    offset = offset || 0;
    var limit = 5;
    var channel = _.get(data, 'context.session.BotUserSession.lastMessage.channel', "");
    return gethistory(limit, offset, data)
        .then(function (messages) {
            messages = messages || [];
            // var indexOfWelcomeMessage = utils.hasWelcome(messages);
            // //for facebook we are just bringing first 10 as no separator
            // if (channel == "facebook") { indexOfWelcomeMessage = true; }
            // if (messages.length == 10 && indexOfWelcomeMessage == false) {
            //     return getSessionHistory(data, offset + 10)
            //         .then(function (res) {
            //             return res.concat(messages)
            //         });
            // }
            // if (indexOfWelcomeMessage == false || indexOfWelcomeMessage==true ) indexOfWelcomeMessage = 0;
            return messages;//messages.slice(indexOfWelcomeMessage, messages.length);
        }).catch(function (e) {
            console.error("getSessionHistory | BotKit.js | ERROR", e);
        });
}


async function connectToAgent(requestId, data, cb) {
    var visitorId = _.get(data, 'channel.channelInfos.from');
    if (!visitorId) {
        visitorId = _.get(data, 'channel.from');
    }
    //console.log("|connectToAgent | BotKit.js |", visitorId);
    redisOperations.updateRedisWithUserData(visitorId, data).then(function () {
        //console.log("|connectToAgent | BotKit.js | updateRedisWithUserData |", visitorId);
        redisOperations.setTtl("data", visitorId);
    })
    data.message = messageConf.agentAssignMsg;

    data.overrideMessagePayload = null;

    sdk.sendUserMessage(data, cb).then(async function () {
        try {
            const session = await api.getSession();
            var customData ="";// _.get(data, 'context.session.BotUserSession.lastMessage.messagePayload.botInfo.customData', {});
            console.info("|connectToAgent | BotKit.js | Custom Data |", customData,visitorId);
            var options = customData || {};
            if (sfdcConfig.isTest) {
                customData = sfdcConfig.customData;
            }
            /*Default country is set to be "be" (also for facebook)*/
            var country ="US";// _.get(customData, 'account.address.country', "be").toLowerCase();
            var buttonId ="5730B000000PGI0";//sfdcConfig.live_agent.buttonIds[country];
            var channel = _.get(data, 'context.session.BotUserSession.lastMessage.channel', "");
            
            options.FirstName = data.context.session.BotUserSession.firstName;
            options.LastName = data.context.session.BotUserSession.lastName;
            options.VisitorName = data.context.session.BotUserSession.name;
            options.emailId = data.context.session.BotUserSession.emailId;
            options.contactId = data.context.session.BotUserSession.contactId;
            options.caseNumber = data.context.session.BotUserSession.caseNum;
            options.caseId = data.context.session.BotUserSession.caseId;

            //options.zip = data.context.zip;
            //options.accountId = data.context.session.BotUserSession.caseId;
            options.buttonId = buttonId;

            //console.log("|connectToAgent | BotKit.js | Request for initChat |", visitorId, "|", options.uri);
            await api.initChat(session, options);
            var redisEntry = {
                session_key: session.key,
                affinity_token: session.affinityToken,
                visitorId: visitorId,
            }
            redisOperations.updateRedisWithEntry(visitorId, redisEntry).then(function (res) {
                //console.log("|connectToAgent | BotKit.js | updateRedisWithEntry |", visitorId);
                redisOperations.setTtl("entry", visitorId);
                var connectToAgent = { "server": 1, "time": new Date() }
                getPendingMessages(visitorId, session.key, session.affinityToken).then(function (res) {
                    redisOperations.updateRedisConnectedAgent(visitorId, connectToAgent).then(function () {
                    redisOperations.setTtl("connected", visitorId);
                    VisitorTimeOutEvent.add(data);
                    getSessionHistory(data).then(async function (messages) {
                        var str="";
                        var contactid ="";
                        var emailid ="";
                        if(data.context.session.BotUserSession.caseId){
                            if(data.context.session.BotUserSession.createContactId === "NA"){
                                contactid = data.context.session.BotUserSession.contactId;
                            }else{
                            contactid=data.context.session.BotUserSession.createContactId;
                            }
                        //if(data.context.entities.Email){
                        //     emailid =data.context.entities.Email;
                        //}

                        str = "Name: " + data.context.session.BotUserSession.name;
                        str = str + "\nCase Id: " + data.context.session.BotUserSession.caseId;
                        str = str + "\nCase Number: " + data.context.session.BotUserSession.caseNum;
                        str = str + "\nContact Id: " + contactid + "\n";
//                         str =str + "\n Email Id : "+emaiid+"\n";
                        }
                        str =str+ await utils.getHistoryString(messages);
                        //console.log("Message history is"+str)
                        var message = {
                            text: str
                        };
                        //Salesforce platform issue made us add a delay of 3 seconds.
                        await sleep(3000);
                        api.sendMsg(session.key, session.affinityToken, message).catch(function (err) {
                            console.error("connectToAgent | BotKit.js | Error while Sending Transcript |", visitorId, err);
                            redisOperations.deleteRedisData("data:" + visitorId);
                            redisOperations.deleteRedisData("entry:" + visitorId);
                            redisOperations.deleteRedisData("connected:" + visitorId);
                            VisitorTimeOutEvent.delete(data);
                        });
                    });}).catch(function (err){
                    console.log("|connectToAgent | BotKit.js | An error occured while processing the pending messages"+err);

                    });
                     //console.log("|connectToAgent | BotKit.js | PollingStarted |  ", visitorId);
                //    getPendingMessages(visitorId, session.key, session.affinityToken);
                });
            });
        }
        catch (err) {
          //  console.log("error in anything else scenario"+JSON.stringify(err))
            console.error("connectToAgent | BotKit.js | Error while Creating Session |", visitorId, err);
            redisOperations.deleteRedisData("data:" + visitorId);
            redisOperations.deleteRedisData("entry:" + visitorId);
            redisOperations.deleteRedisData("connected:" + visitorId);
            VisitorTimeOutEvent.delete(data);
            sdk.clearAgentSession(data);
            data.message = messageConf.chatRequestFailMsg;
            data.overrideMessagePayload = null;
            return sdk.sendUserMessage(data, async function () {
                //invoking dialog AnythingElseDialog after failing
                data.message = "AnythingElseDialog";
                await sdk.sendBotMessage(data);
                //console.log("connectToAgent | BotKit.js | Invoking AnythingElseDialog |", visitorId);
            });
        }
    });
}

function IsJsonString(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

function onBotMessage(requestId, data, cb) {
    //debug("Bot Message Data", data.message);

    if(IsJsonString(data.message) ){
        //console.log("onBotMessage intent:", data.context.intent, "msg:->",JSON.parse(data.message).payload.text);
        if (JSON.parse(data.message).payload.text === "Does that info work for ya? Shout if you need anything else."){
            //var caseid=data.context.caseId;
            var caseid = data.context.session.BotUserSession.caseId;
            var contactid ="";

            //OG         
            //if(data.context.createContactId === "NA"){
            //    contactid=data.context.contactId;
            //}else{
            //    contactid=data.context.createContactId;
            //}
            if (data.context.session.BotUserSession.createContactId === "NA") {
                contactid = data.context.session.BotUserSession.contactId;
            } else {
                contactid = data.context.session.BotUserSession.createContactId;
            }

            // var brandid="";
            // if(data.context.entities.BuschType==="Busch"){
            //     brandid="aCi0B000000CtmZSAS"
            // }else if(data.context.entities.BuschType==="Busch Light"){
            //     brandid="aCi0B000000CtmbSAC";
            // }else if(data.context.entities.BuschType==="Busch Ice"){
            //     brandid="aCi0B000000CtmaSAC";
            // }else if(data.context.entities.BuschType==="Busch Non-Alcoholic"){
            //     brandid="aCi0B000000CtmcSAC"
            // }
            //Dev
            // var brandid="";
            // if(data.context.entities.BuschType==="BSH"){
            //     brandid="aCi5C0000004L4u"
            // }else if(data.context.entities.BuschType==="BHL"){
            //     brandid="aCi5C0000004L4z";
            // }else if(data.context.entities.BuschType==="IBH"){
            //     brandid="aCi5C0000004L54";
            // }else if(data.context.entities.BuschType==="BNA"){
            //     brandid="aCi5C0000004L59"
            // }
            //UAT
            var brandid="";
            if(data.context.entities.BuschType==="BSH"){
                brandid=brands.BSH;
            }else if(data.context.entities.BuschType==="BHL"){
                brandid=brands.BHL;
            }else if(data.context.entities.BuschType==="IBH"){
                brandid=brands.IBH;
            }else if(data.context.entities.BuschType==="BNA"){
                brandid=brands.BNA
            }else if (data.context.entities.BuschType === "BHA") {
                brandid = brands.BHA
            }
            //Saleforce does not close the case unless i give             "B2C_Do_Not_Communicate_For_This_Case__c":"true",
            //Lakshmi to look into it.
            var dataClosed = {
                "Status": "Closed",
                "Origin": "Chat",
                "B2C_Brand__c":brandid,
                "Priority":"Medium",
                 "RecordType": {
                     "Name": "Inquiry"
                   },
                "B2C_Do_Not_Communicate_For_This_Case__c":"true",
                "B2C_Subject1__c": "Availability",
                "B2C_Subject2__c": "General",
                "ContactId" :contactid
            }
            var optionsClosed = {
                method: 'PATCH',
                body: dataClosed,
                uri: apiURL+'/sobjects/case/'+caseid,
                headers: {
                    'content-type': 'application/json',
                    "Authorization":"Bearer "+api.getJWTToken()
                },
                json: true
            };
           // console.log(" options:" + JSON.stringify(optionsClosed));
            request(optionsClosed).then(function (respc) {
               console.log("Case closed-->"+JSON.stringify(respc));
           }).catch(function (err) {
               console.log(JSON.stringify(err))
           });
        }
        else if (JSON.parse(data.message).payload.text === "You good to go? Or do you wanna pull up a chair and hang out some more?") {
            var caseid = data.context.session.BotUserSession.caseId;
            var contactid = "";
            if (data.context.session.BotUserSession.createContactId === "NA") {
                contactid = data.context.session.BotUserSession.contactId;
            } else {
                contactid = data.context.session.BotUserSession.createContactId;
            }
            var brandid = "";
            if (data.context.entities.BuschType === "BSH") {
                brandid = brands.BSH;
            } else if (data.context.entities.BuschType === "BHL") {
                brandid = brands.BHL;
            } else if (data.context.entities.BuschType === "IBH") {
                brandid = brands.IBH;
            } else if (data.context.entities.BuschType === "BNA") {
                brandid = brands.BNA
            } else if (data.context.entities.BuschType === "BHA") {
                brandid = brands.BHA
            }
            var subject1 = "";
            var subject2 = "";
            if (data.context.entities.NutInfo == 'Calories') {
                subject1 = "Nutrition"; subject2 = "Calorie/Fat";
            } else if (data.context.entities.NutInfo == 'Carbs') {
                subject1 = "Nutrition"; subject2 = "Carbohydrates";
            } else if (data.context.entities.NutInfo == 'Alcohol By Volume') {
                subject1 = "Nutrition"; subject2 = "Alcohol";
            } else if (data.context.entities.NutInfo == 'Protein') {
                subject1 = "Nutrition"; subject2 = "General";
            } else if (data.context.entities.NutInfo == 'Ingredients') {
                subject1 = "Brewing"; subject2 = "Ingredient";
            }
            //Saleforce does not close the case unless i give             "B2C_Do_Not_Communicate_For_This_Case__c":"true",
            //Lakshmi to look into it.
            var dataClosed = {
                "Status": "Closed",
                "Origin": "Chat",
                "B2C_Brand__c": brandid,
                "Priority": "Medium",
                "RecordType": {
                    "Name": "Inquiry"
                },
                "B2C_Do_Not_Communicate_For_This_Case__c": "true",
                "B2C_Subject1__c": subject1,
                "B2C_Subject2__c": subject2,
                "ContactId": contactid
            }
            var optionsClosed = {
                method: 'PATCH',
                body: dataClosed,
                uri: apiURL + '/sobjects/case/' + caseid,
                headers: {
                    'content-type': 'application/json',
                    "Authorization": "Bearer " + api.getJWTToken()
                },
                json: true
            };
            // console.log(" options:" + JSON.stringify(optionsClosed));
            request(optionsClosed).then(function (respc) {
                console.log("Case closed-->" + JSON.stringify(respc));
            }).catch(function (err) {
                console.log(JSON.stringify(err))
            });
        }
             
        else if (data.context.intent === "Swag") {
            var caseid = data.context.session.BotUserSession.caseId;
            var contactid = "";
            if (data.context.session.BotUserSession.createContactId === "NA") {
                contactid = data.context.session.BotUserSession.contactId;
            } else {
                contactid = data.context.session.BotUserSession.createContactId;
            }
            var brandid = brands.BSH;
            
            var subject1 = "Merchandise";
            var subject2 = "Other Merchandise";
            
            //Saleforce does not close the case unless i give             "B2C_Do_Not_Communicate_For_This_Case__c":"true",
            //Lakshmi to look into it.
            var dataClosed = {
                "Status": "Closed",
                "Origin": "Chat",
                "B2C_Brand__c": brandid,
                "Priority": "Medium",
                "RecordType": {
                    "Name": "Inquiry"
                },
                "B2C_Do_Not_Communicate_For_This_Case__c": "true",
                "B2C_Subject1__c": subject1,
                "B2C_Subject2__c": subject2,
                "ContactId": contactid
            }
            var optionsClosed = {
                method: 'PATCH',
                body: dataClosed,
                uri: apiURL + '/sobjects/case/' + caseid,
                headers: {
                    'content-type': 'application/json',
                    "Authorization": "Bearer " + api.getJWTToken()
                },
                json: true
            };
            // console.log(" options:" + JSON.stringify(optionsClosed));
            request(optionsClosed).then(function (respc) {
                console.log("Case closed-->" + JSON.stringify(respc));
            }).catch(function (err) {
                console.log(JSON.stringify(err))
            });
        }

        else if (JSON.parse(data.message).payload.text === "Need anything else? Just holler if you do.") {
            var caseid = data.context.session.BotUserSession.caseId;
            var contactid = "";
            if (data.context.session.BotUserSession.createContactId === "NA") {
                contactid = data.context.session.BotUserSession.contactId;
            } else {
                contactid = data.context.session.BotUserSession.createContactId;
            }
            var brandid = brands.BSH;

            var subject1 = "Promotion";
            var subject2 = "";

            if (data.context.entities.RebateIntent == 'Learn more') {
                subject2 = "Rules/concept";
            } else if (data.context.entities.RebateIntent == 'Track my rebate') {
                subject2 = "When will I receive my Prize/Card/Item/9'ner?";
            } else if (data.context.entities.RebateIntent == 'Submit a rebate') {
                subject2 = "Entry method";
            }

            //Saleforce does not close the case unless i give             "B2C_Do_Not_Communicate_For_This_Case__c":"true",
            //Lakshmi to look into it.
            var dataClosed = {
                "Status": "Closed",
                "Origin": "Chat",
                "B2C_Brand__c": brandid,
                "Priority": "Medium",
                "RecordType": {
                    "Name": "Inquiry"
                },
                "B2C_Do_Not_Communicate_For_This_Case__c": "true",
                "B2C_Subject1__c": subject1,
                "B2C_Subject2__c": subject2,
                "ContactId": contactid
            }
            var optionsClosed = {
                method: 'PATCH',
                body: dataClosed,
                uri: apiURL + '/sobjects/case/' + caseid,
                headers: {
                    'content-type': 'application/json',
                    "Authorization": "Bearer " + api.getJWTToken()
                },
                json: true
            };
            // console.log(" options:" + JSON.stringify(optionsClosed));
            request(optionsClosed).then(function (respc) {
                console.log("Case closed-->" + JSON.stringify(respc));
            }).catch(function (err) {
                console.log(JSON.stringify(err))
            });
        }
    }

    if (data.message.length === 0 || data.message === '') {
        return;
    }
    var visitorId = _.get(data, 'channel.from');
    redisOperations.getRedisData("entry:" + visitorId).then(function (entry) {
        var message_tone = _.get(data, 'context.message_tone');
        if (message_tone && message_tone.length > 0) {
            var angry = _.filter(message_tone, {
                tone_name: 'angry'
            });
            if (angry.length) {
                angry = angry[0];
                if ((angry.level == 3 || angry.level > 3) && (data.context && data.context.intent != "Agent Chat")) {
                    //console.log("|connectToAgent | BotKit.js | Angry Level Found |", visitorId);
                    data.message = "Agent Chat";
                    data.overrideMessagePayload = null;
                    return sdk.sendBotMessage(data);
                } else {
                    sdk.sendUserMessage(data, cb);
                }
            } else {
                sdk.sendUserMessage(data, cb);
            }
        } else if (!entry) {
            sdk.sendUserMessage(data, cb);
        }
    })
}

function saleforceAPIInvocation(data,cb){
    if(data.context.entities.Email){
        var optInVal="false"
        if(data.context.entities.optIn && data.context.entities.optIn === "yes")
        {
            if(data.context.entities.OptInPolicy && data.context.entities.OptInPolicy === "yes"){
            optInVal="true"
            }
        }

        //console.log("inside talk to person")
       
        //risk of sequel injection? need to apply a filter for sql injection?
        var getEmail = {
            method: 'GET',
            uri: apiURL+'/query/?q=SELECT+Id+from+Contact+where+Email='+'\''+data.context.entities.Email +'\''+'order+by+createddate+desc+LIMIT+1',
            headers: {
                'content-type': 'application/json',
                "Authorization":"Bearer "+ api.getJWTToken()
            }
        };
        //    console.log(" options:-->" + JSON.stringify(getEmail));
        return request(getEmail).then(function (res) {
            //console.log("Does the contact exist? "+JSON.stringify(res));
            var resp = JSON.parse(res);

            if(resp.totalSize === 1){
                data.context.confirmed="true";
                var ctctId = JSON.parse(res).records[0].Id
                data.context.contactId=ctctId;
                var getContactDetails = {
                    method: 'GET',
                    uri: apiURL+'/sobjects/Contact/'+ctctId
                ,
                    headers: {
                        'content-type': 'application/json',
                        "Authorization":"Bearer "+ api.getJWTToken()
           
                    }
                }; 
                return  request(getContactDetails).then(function (contactResp){
                    var contactRespdet = JSON.parse(contactResp);
                    //console.log("_______________contact respdet__________>>> " + JSON.stringify(contactRespdet));
                    //data.context.zip = contactRespdet.MailingPostalCode;
                    data.context.firstName = contactRespdet.FirstName;
                    data.context.lastName = contactRespdet.LastName;
                    data.context.name = contactRespdet.Name;
                    data.context.contactId = contactRespdet.Id;
                    data.context.emailId = contactRespdet.Email;
                    //data.context.birthday = contactRespdet.Birthdate;

                    data.context.contactDetails=contactRespdet;
                    return data;
                }).catch(function (err) {
                    console.log("Error "+JSON.stringify(err))
                });
            }else{
                if (data.context.entities.Email && data.context.entities.Name && data.context.entities.Birthday && data.context.entities.Zip) {
                    var dateEntity = data.context.entities.Birthday;
                    // console.log(dateEntity)
                    var dateInput = "";
                    if (dateEntity) {
                        dateInput = dateEntity.replace(/(\d\d)\/(\d\d)\/(\d{4})/, "$3-$1-$2");
                    }
                    var firstname = "";
                    var lastname = "";
                    var name = data.context.entities.Name
                    if (name) {
                        var fullName = name.split(' '),
                            firstname = fullName[0],
                            lastname = fullName[fullName.length - 1];
                    }
                    var dataContact = {
                        "LastName": lastname,
                        "FirstName": firstname,
                        "Email": data.context.entities.Email,
                        "MobilePhone": "",
                        "Status__c": "Active",
                        "MailingPostalCode": data.context.entities.Zip,
                        "B2C_OPT_IN__c": optInVal,
                        "B2C_Contact_Type__c": "Consumer",
                        "Birthdate": dateInput,
                        "B2C_Live_Chat_Optin__c": "on",
                        "RecordType": {
                            "Name": "ABI B2C"
                        }
                    }
                    var createContactOptions = {
                        method: 'POST',
                        body: dataContact,
                        uri: apiURL + '/sobjects/Contact/',
                        headers: {
                            'content-type': 'application/json',
                            //  "Authorization":"Bearer "+auth.access_token
                            "Authorization": "Bearer " + api.getJWTToken()
                        },
                        json: true
                    };
                    //  console.log("Case Creation options:" + JSON.stringify(createContactOptions));
                    return request(createContactOptions).then(function (contCreateResp) {
                        //   var contnew = JSON.parse(contCreateResp);
                        data.context.firstName = data.context.entities.Name;
                        data.context.emailId = data.context.entities.Email;
                        console.log("Contact Creation-->" + JSON.stringify(contCreateResp));
                        var newContract = JSON.stringify(contCreateResp);
                        //  console.log("Contact Creation-->"+JSON.parse(contCreateResp).id);
                        data.context.createContactId = (JSON.parse(newContract)).id;
                        data.context.confirmed = "true";
                        data.context.session.BotUserSession.Name = data.context.entities.Name;
                        return data;
                    }).catch(function (err) {
                        console.log("An Error Occured -->" + JSON.stringify(err))
                    });
                } //else {
                  //  connectToAgent(requestId, data, cb);
                //}
            }

        }).catch(function (err) {
            console.log("Error "+JSON.stringify(err))
        });


           // return api.getChatButtons(developerName, auth.access_token)
           //     .then(function(buttons) {
           //         return buttons[0];
           //     })
       
      


          // sdk.sendUserMessage(data, cb);
    } 
}

function createCase(data, callback) {
    var contactid = "";
    if (data.context.createContactId === "NA") {
        contactid = data.context.contactId;
    } else {
        contactid = data.context.createContactId;
    }
    var dataCaseCreation = {
        //        "Subject": "In Progress",
        "Status": "New",
        "Origin": "Chat",
        "Priority": "Medium",
        "RecordType": {
            "Name": "Inquiry"
        },
        "B2C_Subject1__c": "Availability",
        "B2C_Subject2__c": "General",

        "ContactId": contactid
    }
    //First we make a call to create a case and get caseid
    // Then we use email to fetch the contact api payload
    // If contact does not exist we create a new contact. //payload
    //live agent
    // We pull history from kore chatbot and pass it to sf
    // Make another API call to transactions API which will store this chat history of SF


    var options = {
        method: 'POST',
        body: dataCaseCreation,
        uri: apiURL + '/sobjects/case/',
        headers: {
            'content-type': 'application/json',
            "Authorization": "Bearer " + api.getJWTToken()
        },
        json: true
    };
    //console.log(" options:" + JSON.stringify(options));
    return request(options).then(function (resCase) {
        console.log("New case is created-->" + JSON.stringify(resCase));
        var casestr = JSON.stringify(resCase);
        data.context.caseId = (JSON.parse(casestr)).id;
        //        var caseNew= JSON.parse(resCase);
        return data;
    }).catch(function (err) {
        console.log(JSON.stringify(err))
    });
}

function getCaseNumber(data, callback) {
    //Getting the case number with the newly created case id
    var getCaseNumber = {
        method: 'GET',
        uri: apiURL + '/query/?q=SELECT+CaseNumber+FROM+Case+WHERE+Id=' + '\'' + data.context.caseId + '\'',
        headers: {
            'content-type': 'application/json',
            "Authorization": "Bearer " + api.getJWTToken()
        }
    };
    return request(getCaseNumber).then(function (resCaseNo) {
        console.log("JSON Case number is --> " + JSON.parse(resCaseNo).records[0].CaseNumber);
        data.context.caseNum = JSON.parse(resCaseNo).records[0].CaseNumber;
        //data.context.session.BotUserSession.caseNum = JSON.parse(resCaseNo).records[0].CaseNumber;
        return data;
    }).catch(function (err) {
        console.log(JSON.stringify(err))
    });
}

function gatherFeedback(data,callback){
    //DO NOT REVERSE the feedback!!!
    var rating;
    if(data.context.entities.FeedbackFirst==="1"){
        rating=1;
    }
    if(data.context.entities.FeedbackFirst==="2"){
        rating=2;
    }
    if(data.context.entities.FeedbackFirst==="4"){
        rating=3;
    }
    if(data.context.entities.FeedbackFirst==="3"){
        rating=4;
    }
    if(data.context.entities.FeedbackFirst==="5"){
        rating=5;
    }

    var feedbackCreation = {
        "B2C_Services_Satisfaction__c": rating,
        "B2C_Verbatim__c": data.context.entities.FeedbackSecond,
        "Case__c": data.context.session.BotUserSession.caseId
    }
    
//First we make a call to create a case and get caseid
// Then we use email to fetch the contact api payload
// If contact does not exist we create a new contact. //payload
//live agent
// We pull history from kore chatbot and pass it to sf
// Make another API call to transactions API which will store this chat history of SF


    var options = {
        method: 'POST',
        body: feedbackCreation,
        uri: apiURL+'/sobjects/Survey_Response__c',
        headers: {
            'content-type': 'application/json',
            "Authorization":"Bearer "+api.getJWTToken()
        },
        json: true
    };
  //  console.log(" options:" + JSON.stringify(options));
    return request(options).then(function (resCase) {
        //console.log("New Feedback is created-->"+JSON.stringify(resCase));

        var brandid="";
        if(data.context.entities.BuschType==="BSH"){
            brandid=brands.BSH;
        }else if(data.context.entities.BuschType==="BHL"){
            brandid=brands.BHL;
        }else if(data.context.entities.BuschType==="IBH"){
            brandid=brands.IBH;
        }else if(data.context.entities.BuschType==="BNA"){
            brandid=brands.BNA
        }else if (data.context.entities.BuschType === "BHA") {
            brandid = brands.BHA
        }

        if(data.context.createContactId === "NA"){
            contactid=data.context.contactId;
        }else{
            contactid=data.context.createContactId;
        }
        var dataClosed = {
            "Status": "Closed",
            "Origin": "Chat",
            "B2C_Brand__c":brandid,
            "Priority":"Medium",
             "RecordType": {
                 "Name": "Inquiry"
               },
        "B2C_Do_Not_Communicate_For_This_Case__c":"true",
            "B2C_Subject1__c" : "Availability",
            "ContactId" :contactid
        }
        var optionsClosed = {
            method: 'PATCH',
            body: dataClosed,
            uri: apiURL+'/sobjects/case/'+caseid,
            headers: {
                'content-type': 'application/json',
                "Authorization":"Bearer "+api.getJWTToken()
            },
            json: true
        };
      //  console.log(" options:" + JSON.stringify(optionsClosed));
            request(optionsClosed).then(function (respc) {
               //console.log("Case updated with do not communicate flag-->"+JSON.stringify(respc));
               return data;   

           }).catch(function (err) {
               console.log(JSON.stringify(err))
           });
//        var caseNew= JSON.parse(resCase);
    }).catch(function (err) {
        console.log(JSON.stringify(err))
    });

}

function onUserMessage(requestId, data, cb) {
        var visitorId = _.get(data, 'channel.from');
        api.getJWTToken()
    //     redisOperations.deleteRedisData("entry:" + visitorId)
    //     redisOperations.deleteRedisData("data:" + visitorId)
    //     redisOperations.deleteRedisData("connected:" + visitorId)
    //    // endChat = true;1183b3b2-cf75-42dc-a5ef-fcf124dc4c29!1586443355592!vfJPJzbfrPSF8E1wURmySpM4XTw=
    //     sdk.clearAgentSession(data);

        if (data.channel && !data.channel.channelInfos) {
        data.channel.channelInfos = {
            from: visitorId
        }
    }
    redisOperations.getRedisData("entry:" + visitorId).then(async function (entry) {
        if (data.message === "#session_closed" || data.message === "quit" || data.message === 'ophouden') {
            closeAgentChat(data, entry, visitorId)
        }

        if (entry) {
            //console.log("|onUserMessage | BotKit.js | Entry |", visitorId);
            var session_key = entry.session_key;
            var affinity_token = entry.affinity_token;
            var message = {
                text: data.message
            }
            data.context.session_key = session_key;
            data.context.affinity_token = affinity_token;
            VisitorTimeOutEvent.add(data);

            return api.sendMsg(session_key, affinity_token, message).catch(function (err) {
                console.error(err);
                clearAgentNotification(data, visitorId);
            })
        } else {
            if (data.message === '*' || data.message === '**' || data.message === '***' || data.message === '****' || data.message === '*****') {
                var text = data.message.length+"";          
                data.message = text;
                //console.log("stars replaced--->",data.message);         //return sdk.sendBotMessage(data, cb);
            }
            sdk.clearAgentSession(data).then(function () {
                return sdk.sendBotMessage(data, cb);
            })
        }
    })
}
async function closeAgentChat(data, entry, visitorId) {
    //console.log("<-------close agent initiated----->");
    try {
        if (entry) {
            var session_key = entry.session_key;
            var affinity_token = entry.affinity_token;
            await api.endChat(session_key, affinity_token);
        }
    }
    catch (error) {
        console.error("|closeAgentChat | BotKit.js |", error);
    }
    clearAgentNotification(data, visitorId);
}
function closeChat(data) {
    VisitorTimeOutEvent.delete(data);
    var visitorId = _.get(data, 'channel.channelInfos.from');
    if (!visitorId) {
        visitorId = _.get(data, 'channel.from');
    }
    redisOperations.deleteRedisData("entry:" + visitorId)
    redisOperations.deleteRedisData("data:" + visitorId)
    redisOperations.deleteRedisData("connected:" + visitorId)
    sdk.sendUserMessage(data).then(() => {
        sdk.clearAgentSession(data).then(() => {
            //console.log("| closeChat | BotKit.js | ClearAgentSession |", visitorId);
        });
    })

}
function clearAgentNotification(data, visitorId) {
    //console.log("|clearAgentNotification | BotKit.js |", visitorId);
    try {
        sdk.clearAgentSession(data);
        redisOperations.deleteRedisData("entry:" + visitorId);
        redisOperations.deleteRedisData("data:" + visitorId);
        redisOperations.deleteRedisData("connected:" + visitorId);
        data.message = messageConf.sessionClosedMsg;
        data.overrideMessagePayload = null;
        sdk.sendUserMessage(data);
    }
    catch (error) {
        console.error("|clearAgentNotification | BotKit.js |", error);
    }
}
function onAgentTransfer(requestId, data, callback) {

    var visitorId = _.get(data, 'channel.channelInfos.from');
    if (!visitorId) {
        visitorId = _.get(data, 'channel.from');
    }
    connectToAgent(requestId, data, callback);
}

/*
 * This is the implementation of BotKit.
 *
 * It showcases how the BotKit can intercept the message being sent to the bot or the user.
 *
 * We can either update the message, or chose to call one of 'sendBotMessage' or 'sendUserMessage'
 */
async function shutdown(e) {
    /*Close redis database module*/
    try {
        redisOperations.closeConnection();
    }
    catch (e) {
        this.e = e;
        console.error("|shutdown | BotKit.js | Closing Redis connection Error|", e);
    }
    if (e) {
        process.exit(1); // Non-zero failure code
    } else {
        //console.log("|shutdown | BotKit.js | Closing Redis connection success");
        process.exit(0);
    }
}

async function startup() {
    console.log("|startup | BotKit.js");
    console.log('|startup | BotKit.js | PID : ' + process.pid);
    restartPolling();
}

function restartPolling() {
    /*Restarting long Polling for all the active sessions*/
    console.log('|restartPolling | BotKit.js | ');
    redisOperations.getRedisKeys().then(function (keys) {
        console.log('|restartPolling | BotKit.js | Count ', keys.length);
        for (var i = 0; i < keys.length; i++) {
            redisOperations.getRedisData(keys[i]).then(function (data) {
                getPendingMessages(data.visitorId, data.session_key, data.affinity_token).then()
                    .catch(function (err) {
                        console.log("###########"+JSON.stringify(err))
                        console.error('|restartPolling | BotKit.js | error while restarting polling for ', data.visitorId,err);
                    });
            });
        }
    });
}
startup();
process.on('SIGTERM', () => {
    console.log("|SIGTERM | BotKit.js");
    shutdown();
});

process.on('SIGINT', () => {
    console.log("|SIGINT | BotKit.js");
    shutdown();
});

process.on('uncaughtException', err => {
    console.error("|uncaughtException | BotKit.js |", err);
});
module.exports = {
    botId: botId,
    botName: botName,
    closeChat: function(data) {
        //VisitorTimeOutEvent.delete(data);
        var visitorId = _.get(data, 'channel.channelInfos.from');
        if (!visitorId) {
            visitorId = _.get(data, 'channel.from');
        }
        console.debug("close chat for ", visitorId);
        stopChat(data, visitorId);
        // delete userResponseDataMap[visitorId];
        // delete _map[visitorId];
        // // sdk.clearAgentSession(data);
        sdk.sendUserMessage(data);
        /*.then(() => {
            sdk.clearAgentSession(data).then(() => {
                return;
            });
        })*/
    },
    on_user_message: function (requestId, data, callback) {
        debug('on_user_message');
        onUserMessage(requestId, data, callback);
    },
    on_bot_message: function (requestId, data, callback) {
        debug('on_bot_message');
        //adverse event -> Make call to python route for adverse events
        onBotMessage(requestId, data, callback);


    },
    on_agent_transfer: function (requestId, data, callback) {
        console.log("|on_agent_transfer | BotKit.js");
        onAgentTransfer(requestId, data, callback);
    },
    on_webhook  : function(requestId, data, componentId, callback) {
        //console.log('make api call here '+componentId)
        if(componentId ==="sfAPIInvocation"){
        try{

            saleforceAPIInvocation(data,callback).then(function (response) {
                //console.log("JSON PARS-------->E"+response)
                callback(null, data)
                }
            );
        } catch (err) {
        console.log("error in cuproxy", err);
            }
        }

        if(componentId ==="sfCreateCase"){
            try{
    
                createCase(data,callback).then(function (response) {
                    console.log("JSON CaseCreation-->" + response);
                    callback(null, data);
                    }
                );
            } catch (err) {
                console.log("error ", err);
            }
        }

        if (componentId === "sfGetCaseNumber") {
            try {
                getCaseNumber(data, callback).then(function (response) {
                    //console.log("Case number -->" + response)
                    callback(null, data);
                }
                );
            } catch (err) {
                console.log("error ", err);
            }
        }

        if(componentId ==="FeedbackHook"){
            try{
        
                gatherFeedback(data,callback).then(function (response) {
                    console.log("JSON CaseCreation-->"+response)
                    callback(null, data)
                    }
                    // 
                );
            } catch (err) {
            console.log("error ", err);
                }
                  
        }
        
    },
    on_event: function (requestId, data, callback) {
        //console.log("|on_event | BotKit.js | event |", data.event, data.context.intent);
        return callback(null, data);
    }
};
